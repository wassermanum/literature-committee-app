import { PrismaClient } from '@prisma/client';

// Enum types for SQLite compatibility
enum UserRole {
  GROUP = 'GROUP',
  LOCAL_SUBCOMMITTEE = 'LOCAL_SUBCOMMITTEE',
  LOCALITY = 'LOCALITY',
  REGION = 'REGION',
  ADMIN = 'ADMIN'
}

enum OrganizationType {
  GROUP = 'GROUP',
  LOCAL_SUBCOMMITTEE = 'LOCAL_SUBCOMMITTEE',
  LOCALITY = 'LOCALITY',
  REGION = 'REGION'
}

enum OrderStatus {
  DRAFT = 'DRAFT',
  PENDING = 'PENDING',
  APPROVED = 'APPROVED',
  IN_ASSEMBLY = 'IN_ASSEMBLY',
  SHIPPED = 'SHIPPED',
  DELIVERED = 'DELIVERED',
  COMPLETED = 'COMPLETED',
  REJECTED = 'REJECTED'
}

enum TransactionType {
  INCOMING = 'INCOMING',
  OUTGOING = 'OUTGOING',
  ADJUSTMENT = 'ADJUSTMENT'
}
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Starting database seeding...');

  // Clear existing data
  await prisma.transaction.deleteMany();
  await prisma.orderItem.deleteMany();
  await prisma.order.deleteMany();
  await prisma.inventory.deleteMany();
  await prisma.literature.deleteMany();
  await prisma.user.deleteMany();
  await prisma.organization.deleteMany();

  // Create organizations hierarchy
  console.log('Creating organizations...');
  
  // Region
  const region = await prisma.organization.create({
    data: {
      name: '–†–µ–≥–∏–æ–Ω –°–∏–±–∏—Ä—å',
      type: OrganizationType.REGION,
      address: '–≥. –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, —É–ª. –õ–µ–Ω–∏–Ω–∞, 1',
      contactPerson: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
      phone: '+7 (383) 123-45-67',
      email: 'region@siberia-na.org',
    },
  });

  // Localities
  const novosibirsk = await prisma.organization.create({
    data: {
      name: '–ú–µ—Å—Ç–Ω–æ—Å—Ç—å –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
      type: OrganizationType.LOCALITY,
      parentId: region.id,
      address: '–≥. –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, —É–ª. –ö—Ä–∞—Å–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 10',
      contactPerson: '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á',
      phone: '+7 (383) 234-56-78',
      email: 'novosibirsk@siberia-na.org',
    },
  });

  const tomsk = await prisma.organization.create({
    data: {
      name: '–ú–µ—Å—Ç–Ω–æ—Å—Ç—å –¢–æ–º—Å–∫',
      type: OrganizationType.LOCALITY,
      parentId: region.id,
      address: '–≥. –¢–æ–º—Å–∫, –ø—Ä. –õ–µ–Ω–∏–Ω–∞, 15',
      contactPerson: '–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤–∏—á',
      phone: '+7 (3822) 345-67-89',
      email: 'tomsk@siberia-na.org',
    },
  });

  // Local subcommittees
  const centralSubcommittee = await prisma.organization.create({
    data: {
      name: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ—Å—Ç–Ω—ã–π –ø–æ–¥–∫–æ–º–∏—Ç–µ—Ç',
      type: OrganizationType.LOCAL_SUBCOMMITTEE,
      parentId: novosibirsk.id,
      address: '–≥. –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, —É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è, 25',
      contactPerson: '–ö–æ–∑–ª–æ–≤ –ê–Ω–¥—Ä–µ–π –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á',
      phone: '+7 (383) 456-78-90',
      email: 'central@novosibirsk-na.org',
    },
  });

  // Groups
  const group1 = await prisma.organization.create({
    data: {
      name: '–ì—Ä—É–ø–ø–∞ "–ù–æ–≤–∞—è –∂–∏–∑–Ω—å"',
      type: OrganizationType.GROUP,
      parentId: novosibirsk.id,
      address: '–≥. –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, —É–ª. –ì–æ–≥–æ–ª—è, 5',
      contactPerson: '–ú–æ—Ä–æ–∑–æ–≤ –ê–ª–µ–∫—Å–µ–π –°–µ—Ä–≥–µ–µ–≤–∏—á',
      phone: '+7 (383) 567-89-01',
      email: 'newlife@groups-na.org',
    },
  });

  const group2 = await prisma.organization.create({
    data: {
      name: '–ì—Ä—É–ø–ø–∞ "–ù–∞–¥–µ–∂–¥–∞"',
      type: OrganizationType.GROUP,
      parentId: tomsk.id,
      address: '–≥. –¢–æ–º—Å–∫, —É–ª. –ü—É—à–∫–∏–Ω–∞, 12',
      contactPerson: '–í–æ–ª–∫–æ–≤ –î–º–∏—Ç—Ä–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á',
      phone: '+7 (3822) 678-90-12',
      email: 'hope@groups-na.org',
    },
  });

  const group3 = await prisma.organization.create({
    data: {
      name: '–ì—Ä—É–ø–ø–∞ "–°–≤–æ–±–æ–¥–∞"',
      type: OrganizationType.GROUP,
      parentId: centralSubcommittee.id,
      address: '–≥. –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, —É–ª. –ú–∏—Ä–∞, 8',
      contactPerson: '–õ–µ–±–µ–¥–µ–≤ –ú–∏—Ö–∞–∏–ª –ò–≤–∞–Ω–æ–≤–∏—á',
      phone: '+7 (383) 789-01-23',
      email: 'freedom@groups-na.org',
    },
  });

  // Create users
  console.log('Creating users...');
  
  const hashedPassword = await bcrypt.hash('password123', 10);

  const adminUser = await prisma.user.create({
    data: {
      email: 'admin@siberia-na.org',
      password: hashedPassword,
      firstName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      lastName: '–°–∏—Å—Ç–µ–º—ã',
      role: UserRole.ADMIN,
      organizationId: region.id,
    },
  });

  const regionUser = await prisma.user.create({
    data: {
      email: 'region@siberia-na.org',
      password: hashedPassword,
      firstName: '–ò–≤–∞–Ω',
      lastName: '–ò–≤–∞–Ω–æ–≤',
      role: UserRole.REGION,
      organizationId: region.id,
    },
  });

  const localityUser1 = await prisma.user.create({
    data: {
      email: 'novosibirsk@siberia-na.org',
      password: hashedPassword,
      firstName: '–ü–µ—Ç—Ä',
      lastName: '–ü–µ—Ç—Ä–æ–≤',
      role: UserRole.LOCALITY,
      organizationId: novosibirsk.id,
    },
  });

  const localityUser2 = await prisma.user.create({
    data: {
      email: 'tomsk@siberia-na.org',
      password: hashedPassword,
      firstName: '–°–∏–¥–æ—Ä',
      lastName: '–°–∏–¥–æ—Ä–æ–≤',
      role: UserRole.LOCALITY,
      organizationId: tomsk.id,
    },
  });

  const subcommitteeUser = await prisma.user.create({
    data: {
      email: 'central@novosibirsk-na.org',
      password: hashedPassword,
      firstName: '–ê–Ω–¥—Ä–µ–π',
      lastName: '–ö–æ–∑–ª–æ–≤',
      role: UserRole.LOCAL_SUBCOMMITTEE,
      organizationId: centralSubcommittee.id,
    },
  });

  const groupUser1 = await prisma.user.create({
    data: {
      email: 'newlife@groups-na.org',
      password: hashedPassword,
      firstName: '–ê–ª–µ–∫—Å–µ–π',
      lastName: '–ú–æ—Ä–æ–∑–æ–≤',
      role: UserRole.GROUP,
      organizationId: group1.id,
    },
  });

  const groupUser2 = await prisma.user.create({
    data: {
      email: 'hope@groups-na.org',
      password: hashedPassword,
      firstName: '–î–º–∏—Ç—Ä–∏–π',
      lastName: '–í–æ–ª–∫–æ–≤',
      role: UserRole.GROUP,
      organizationId: group2.id,
    },
  });

  const groupUser3 = await prisma.user.create({
    data: {
      email: 'freedom@groups-na.org',
      password: hashedPassword,
      firstName: '–ú–∏—Ö–∞–∏–ª',
      lastName: '–õ–µ–±–µ–¥–µ–≤',
      role: UserRole.GROUP,
      organizationId: group3.id,
    },
  });

  // Create literature
  console.log('Creating literature...');
  
  const literature1 = await prisma.literature.create({
    data: {
      title: '–ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç',
      description: '–û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–∏–≥–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –ù–∞—Ä–∫–æ–º–∞–Ω—ã',
      category: '–û—Å–Ω–æ–≤–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
      price: 150.00,
    },
  });

  const literature2 = await prisma.literature.create({
    data: {
      title: '–≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç: –ö–∞–∫ –∏ –ø–æ—á–µ–º—É',
      description: '–ö–Ω–∏–≥–∞ –æ 12 —à–∞–≥–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã –ê–ù',
      category: '–û—Å–Ω–æ–≤–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
      price: 120.00,
    },
  });

  const literature3 = await prisma.literature.create({
    data: {
      title: '–ü—Ä–æ—Å—Ç–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
      description: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –¥–ª—è –≤—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞—é—â–∏—Ö –Ω–∞—Ä–∫–æ–º–∞–Ω–æ–≤',
      category: '–ú–µ–¥–∏—Ç–∞—Ü–∏–∏',
      price: 100.00,
    },
  });

  const literature4 = await prisma.literature.create({
    data: {
      title: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –±—É–∫–ª–µ—Ç—ã (–∫–æ–º–ø–ª–µ–∫—Ç)',
      description: '–ù–∞–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –±—É–∫–ª–µ—Ç–æ–≤ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ê–ù',
      category: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
      price: 50.00,
    },
  });

  const literature5 = await prisma.literature.create({
    data: {
      title: '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –≥—Ä—É–ø–ø–æ–π',
      description: '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –≤–µ–¥—É—â–∏—Ö –≥—Ä—É–ø–ø',
      category: '–°–ª—É–∂–µ–±–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
      price: 80.00,
    },
  });

  // Create inventory
  console.log('Creating inventory...');
  
  // Region inventory (main warehouse)
  await prisma.inventory.createMany({
    data: [
      { organizationId: region.id, literatureId: literature1.id, quantity: 500, reservedQuantity: 0 },
      { organizationId: region.id, literatureId: literature2.id, quantity: 300, reservedQuantity: 0 },
      { organizationId: region.id, literatureId: literature3.id, quantity: 400, reservedQuantity: 0 },
      { organizationId: region.id, literatureId: literature4.id, quantity: 1000, reservedQuantity: 0 },
      { organizationId: region.id, literatureId: literature5.id, quantity: 200, reservedQuantity: 0 },
    ],
  });

  // Locality inventory
  await prisma.inventory.createMany({
    data: [
      { organizationId: novosibirsk.id, literatureId: literature1.id, quantity: 50, reservedQuantity: 0 },
      { organizationId: novosibirsk.id, literatureId: literature2.id, quantity: 30, reservedQuantity: 0 },
      { organizationId: novosibirsk.id, literatureId: literature3.id, quantity: 40, reservedQuantity: 0 },
      { organizationId: novosibirsk.id, literatureId: literature4.id, quantity: 100, reservedQuantity: 0 },
      { organizationId: novosibirsk.id, literatureId: literature5.id, quantity: 20, reservedQuantity: 0 },
      
      { organizationId: tomsk.id, literatureId: literature1.id, quantity: 25, reservedQuantity: 0 },
      { organizationId: tomsk.id, literatureId: literature2.id, quantity: 15, reservedQuantity: 0 },
      { organizationId: tomsk.id, literatureId: literature3.id, quantity: 20, reservedQuantity: 0 },
      { organizationId: tomsk.id, literatureId: literature4.id, quantity: 50, reservedQuantity: 0 },
      { organizationId: tomsk.id, literatureId: literature5.id, quantity: 10, reservedQuantity: 0 },
    ],
  });

  // Create sample orders
  console.log('Creating sample orders...');
  
  const order1 = await prisma.order.create({
    data: {
      orderNumber: 'ORD-2024-001',
      fromOrganizationId: group1.id,
      toOrganizationId: novosibirsk.id,
      status: OrderStatus.PENDING,
      totalAmount: 370.00,
      notes: '–°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏',
    },
  });

  await prisma.orderItem.createMany({
    data: [
      {
        orderId: order1.id,
        literatureId: literature1.id,
        quantity: 2,
        unitPrice: 150.00,
        totalPrice: 300.00,
      },
      {
        orderId: order1.id,
        literatureId: literature3.id,
        quantity: 1,
        unitPrice: 100.00,
        totalPrice: 100.00,
      },
    ],
  });

  const order2 = await prisma.order.create({
    data: {
      orderNumber: 'ORD-2024-002',
      fromOrganizationId: novosibirsk.id,
      toOrganizationId: region.id,
      status: OrderStatus.APPROVED,
      totalAmount: 1200.00,
      notes: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏',
    },
  });

  await prisma.orderItem.createMany({
    data: [
      {
        orderId: order2.id,
        literatureId: literature1.id,
        quantity: 5,
        unitPrice: 150.00,
        totalPrice: 750.00,
      },
      {
        orderId: order2.id,
        literatureId: literature2.id,
        quantity: 3,
        unitPrice: 120.00,
        totalPrice: 360.00,
      },
      {
        orderId: order2.id,
        literatureId: literature5.id,
        quantity: 1,
        unitPrice: 80.00,
        totalPrice: 80.00,
      },
    ],
  });

  const order3 = await prisma.order.create({
    data: {
      orderNumber: 'ORD-2024-003',
      fromOrganizationId: group2.id,
      toOrganizationId: tomsk.id,
      status: OrderStatus.COMPLETED,
      totalAmount: 250.00,
      notes: '–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
    },
  });

  await prisma.orderItem.createMany({
    data: [
      {
        orderId: order3.id,
        literatureId: literature3.id,
        quantity: 2,
        unitPrice: 100.00,
        totalPrice: 200.00,
      },
      {
        orderId: order3.id,
        literatureId: literature4.id,
        quantity: 1,
        unitPrice: 50.00,
        totalPrice: 50.00,
      },
    ],
  });

  // Create sample transactions
  console.log('Creating sample transactions...');
  
  await prisma.transaction.createMany({
    data: [
      {
        type: TransactionType.INCOMING,
        toOrganizationId: region.id,
        literatureId: literature1.id,
        quantity: 100,
        unitPrice: 150.00,
        totalAmount: 15000.00,
        notes: '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞',
      },
      {
        type: TransactionType.OUTGOING,
        fromOrganizationId: region.id,
        toOrganizationId: novosibirsk.id,
        literatureId: literature1.id,
        quantity: 50,
        unitPrice: 150.00,
        totalAmount: 7500.00,
        orderId: order2.id,
        notes: '–û—Ç–≥—Ä—É–∑–∫–∞ –ø–æ –∑–∞–∫–∞–∑—É ORD-2024-002',
      },
      {
        type: TransactionType.OUTGOING,
        fromOrganizationId: novosibirsk.id,
        toOrganizationId: group1.id,
        literatureId: literature1.id,
        quantity: 2,
        unitPrice: 150.00,
        totalAmount: 300.00,
        orderId: order1.id,
        notes: '–û—Ç–≥—Ä—É–∑–∫–∞ –ø–æ –∑–∞–∫–∞–∑—É ORD-2024-001',
      },
      {
        type: TransactionType.OUTGOING,
        fromOrganizationId: tomsk.id,
        toOrganizationId: group2.id,
        literatureId: literature3.id,
        quantity: 2,
        unitPrice: 100.00,
        totalAmount: 200.00,
        orderId: order3.id,
        notes: '–û—Ç–≥—Ä—É–∑–∫–∞ –ø–æ –∑–∞–∫–∞–∑—É ORD-2024-003',
      },
    ],
  });

  console.log('‚úÖ Database seeding completed successfully!');
  console.log('\nüìä Created:');
  console.log(`- ${await prisma.organization.count()} organizations`);
  console.log(`- ${await prisma.user.count()} users`);
  console.log(`- ${await prisma.literature.count()} literature items`);
  console.log(`- ${await prisma.order.count()} orders`);
  console.log(`- ${await prisma.orderItem.count()} order items`);
  console.log(`- ${await prisma.inventory.count()} inventory records`);
  console.log(`- ${await prisma.transaction.count()} transactions`);
  
  console.log('\nüë§ Test users (password: password123):');
  console.log('- admin@siberia-na.org (Admin)');
  console.log('- region@siberia-na.org (Region)');
  console.log('- novosibirsk@siberia-na.org (Locality)');
  console.log('- tomsk@siberia-na.org (Locality)');
  console.log('- central@novosibirsk-na.org (Local Subcommittee)');
  console.log('- newlife@groups-na.org (Group)');
  console.log('- hope@groups-na.org (Group)');
  console.log('- freedom@groups-na.org (Group)');
}

main()
  .catch((e) => {
    console.error('‚ùå Error during seeding:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
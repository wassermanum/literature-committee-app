// –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testOrderTransactionIntegration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');

  try {
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await prisma.$executeRawUnsafe('PRAGMA foreign_keys = OFF');
    await prisma.transaction.deleteMany({
      where: { notes: { contains: 'Integration Test' } }
    });
    await prisma.orderItem.deleteMany({});
    await prisma.order.deleteMany({
      where: { orderNumber: { startsWith: 'TEST-' } }
    });
    await prisma.inventory.deleteMany({
      where: { organization: { name: { startsWith: 'Test Integration' } } }
    });
    await prisma.user.deleteMany({
      where: { email: { startsWith: 'integration-test' } }
    });
    await prisma.organization.deleteMany({
      where: { name: { startsWith: 'Test Integration' } }
    });
    await prisma.literature.deleteMany({
      where: { title: { startsWith: 'Integration Test' } }
    });
    await prisma.$executeRawUnsafe('PRAGMA foreign_keys = ON');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const fromOrg = await prisma.organization.create({
      data: {
        name: 'Test Integration From Org',
        type: 'GROUP',
        address: 'Test Address 1',
        contactPerson: 'Test Contact 1',
        phone: '+1234567890',
        email: 'integration-test-from@org.com',
      },
    });

    const toOrg = await prisma.organization.create({
      data: {
        name: 'Test Integration To Org',
        type: 'LOCALITY',
        address: 'Test Address 2',
        contactPerson: 'Test Contact 2',
        phone: '+1234567891',
        email: 'integration-test-to@org.com',
      },
    });

    const literature = await prisma.literature.create({
      data: {
        title: 'Integration Test Literature',
        description: 'Test literature for integration testing',
        category: 'Books',
        price: 15.50,
      },
    });

    const user = await prisma.user.create({
      data: {
        email: 'integration-test@user.com',
        password: 'hashedpassword',
        firstName: 'Test',
        lastName: 'User',
        role: 'GROUP',
        organizationId: fromOrg.id,
      },
    });

    // –°–æ–∑–¥–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    await prisma.inventory.create({
      data: {
        organizationId: toOrg.id,
        literatureId: literature.id,
        quantity: 100,
        reservedQuantity: 0,
      },
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    const order = await prisma.order.create({
      data: {
        orderNumber: 'TEST-INTEGRATION-001',
        fromOrganizationId: fromOrg.id,
        toOrganizationId: toOrg.id,
        status: 'DRAFT',
        totalAmount: 31.00, // 2 * 15.50
        createdById: user.id,
      },
    });

    await prisma.orderItem.create({
      data: {
        orderId: order.id,
        literatureId: literature.id,
        quantity: 2,
        unitPrice: 15.50,
        totalPrice: 31.00,
      },
    });

    console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', order.orderNumber);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç
    let transactions = await prisma.transaction.findMany({
      where: { orderId: order.id }
    });
    console.log(`üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${transactions.length} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 0)`);

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å APPROVED
    await prisma.order.update({
      where: { id: order.id },
      data: { status: 'APPROVED' }
    });

    // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
    await prisma.inventory.update({
      where: {
        organizationId_literatureId: {
          organizationId: toOrg.id,
          literatureId: literature.id,
        },
      },
      data: {
        reservedQuantity: { increment: 2 }
      }
    });

    console.log('‚úÖ –ó–∞–∫–∞–∑ –æ–¥–æ–±—Ä–µ–Ω –∏ —Ç–æ–≤–∞—Ä—ã –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã');

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å SHIPPED - –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞—Ç—å—Å—è –∏—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await prisma.$transaction(async (tx) => {
      await tx.order.update({
        where: { id: order.id },
        data: { status: 'SHIPPED' }
      });

      // –°–æ–∑–¥–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∫–∞–∫ –≤ OrderService)
      await tx.transaction.create({
        data: {
          type: 'OUTGOING',
          fromOrganizationId: toOrg.id,
          toOrganizationId: fromOrg.id,
          literatureId: literature.id,
          quantity: 2,
          unitPrice: 15.50,
          totalAmount: 31.00,
          orderId: order.id,
          notes: `Order shipment: ${order.orderNumber}`,
        },
      });
    });

    console.log('‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–≥—Ä—É–∂–µ–Ω');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transactions = await prisma.transaction.findMany({
      where: { orderId: order.id, type: 'OUTGOING' }
    });
    console.log(`üìä –ò—Å—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ—Å–ª–µ –æ—Ç–≥—Ä—É–∑–∫–∏: ${transactions.length} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 1)`);

    if (transactions.length === 1) {
      const outgoingTx = transactions[0];
      console.log(`‚úÖ –ò—Å—Ö–æ–¥—è—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${outgoingTx.type}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${outgoingTx.quantity}, —Å—É–º–º–∞: ${outgoingTx.totalAmount}`);
    }

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å COMPLETED - –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞—Ç—å—Å—è –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await prisma.$transaction(async (tx) => {
      await tx.order.update({
        where: { id: order.id },
        data: { status: 'COMPLETED' }
      });

      // –°–æ–∑–¥–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∫–∞–∫ –≤ OrderService)
      await tx.transaction.create({
        data: {
          type: 'INCOMING',
          fromOrganizationId: toOrg.id,
          toOrganizationId: fromOrg.id,
          literatureId: literature.id,
          quantity: 2,
          unitPrice: 15.50,
          totalAmount: 31.00,
          orderId: order.id,
          notes: `Order delivery: ${order.orderNumber}`,
        },
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
      await tx.inventory.update({
        where: {
          organizationId_literatureId: {
            organizationId: toOrg.id,
            literatureId: literature.id,
          },
        },
        data: {
          quantity: { decrement: 2 },
          reservedQuantity: { decrement: 2 },
        },
      });

      await tx.inventory.upsert({
        where: {
          organizationId_literatureId: {
            organizationId: fromOrg.id,
            literatureId: literature.id,
          },
        },
        update: {
          quantity: { increment: 2 },
        },
        create: {
          organizationId: fromOrg.id,
          literatureId: literature.id,
          quantity: 2,
          reservedQuantity: 0,
        },
      });
    });

    console.log('‚úÖ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transactions = await prisma.transaction.findMany({
      where: { orderId: order.id },
      include: {
        fromOrganization: { select: { name: true } },
        toOrganization: { select: { name: true } },
        literature: { select: { title: true } }
      }
    });

    console.log(`üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞: ${transactions.length} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 2)`);

    transactions.forEach((tx, index) => {
      console.log(`  ${index + 1}. ${tx.type}: ${tx.fromOrganization?.name || 'N/A'} ‚Üí ${tx.toOrganization.name}`);
      console.log(`     –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞: ${tx.literature.title}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${tx.quantity}, –°—É–º–º–∞: ${tx.totalAmount}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö
    const fromInventory = await prisma.inventory.findUnique({
      where: {
        organizationId_literatureId: {
          organizationId: fromOrg.id,
          literatureId: literature.id,
        },
      },
    });

    const toInventory = await prisma.inventory.findUnique({
      where: {
        organizationId_literatureId: {
          organizationId: toOrg.id,
          literatureId: literature.id,
        },
      },
    });

    console.log(`üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${fromInventory?.quantity || 0} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 2)`);
    console.log(`üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${toInventory?.quantity || 0} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 98)`);
    console.log(`üì¶ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${toInventory?.reservedQuantity || 0} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 0)`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    const hasOutgoing = transactions.some(tx => tx.type === 'OUTGOING');
    const hasIncoming = transactions.some(tx => tx.type === 'INCOMING');
    const correctInventory = (fromInventory?.quantity === 2) && (toInventory?.quantity === 98);

    if (hasOutgoing && hasIncoming && correctInventory) {
      console.log('üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    } else {
      console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');
    }

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await prisma.$executeRawUnsafe('PRAGMA foreign_keys = OFF');
    await prisma.transaction.deleteMany({
      where: { orderId: order.id }
    });
    await prisma.orderItem.deleteMany({
      where: { orderId: order.id }
    });
    await prisma.order.deleteMany({
      where: { id: order.id }
    });
    await prisma.inventory.deleteMany({
      where: { 
        OR: [
          { organizationId: fromOrg.id },
          { organizationId: toOrg.id }
        ]
      }
    });
    await prisma.user.deleteMany({
      where: { id: user.id }
    });
    await prisma.organization.deleteMany({
      where: { 
        OR: [
          { id: fromOrg.id },
          { id: toOrg.id }
        ]
      }
    });
    await prisma.literature.deleteMany({
      where: { id: literature.id }
    });
    await prisma.$executeRawUnsafe('PRAGMA foreign_keys = ON');

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', error.message);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testOrderTransactionIntegration()
  .then(() => {
    console.log('‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
    process.exit(1);
  });
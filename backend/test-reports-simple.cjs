const http = require('http');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const HOST = 'localhost';
const PORT = 3000;
const BASE_URL = `http://${HOST}:${PORT}`;

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const TEST_USER = {
  email: 'admin@test.com',
  password: 'admin123'
};

let authToken = '';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(method, path, data = null, headers = {}) {
  return new Promise((resolve, reject) => {
    const url = new URL(path, BASE_URL);
    
    const options = {
      hostname: url.hostname,
      port: url.port,
      path: url.pathname + url.search,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };

    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        try {
          const jsonBody = body ? JSON.parse(body) : {};
          resolve({
            status: res.statusCode,
            headers: res.headers,
            body: jsonBody
          });
        } catch (e) {
          resolve({
            status: res.statusCode,
            headers: res.headers,
            body: body
          });
        }
      });
    });

    req.on('error', reject);

    if (data) {
      req.write(JSON.stringify(data));
    }
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function authenticate() {
  console.log('üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...');
  
  try {
    const response = await makeRequest('POST', '/api/auth/login', TEST_USER);
    
    if (response.status === 200 && response.body.success) {
      authToken = response.body.data.token;
      console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', response.body.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º
async function testOrdersReport() {
  console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º...');
  
  try {
    const response = await makeRequest('GET', '/api/reports/orders', null, {
      'Authorization': `Bearer ${authToken}`
    });
    
    if (response.status === 200 && response.body.success) {
      console.log('‚úÖ –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log('   - –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:', response.body.data.summary.totalOrders);
      console.log('   - –û–±—â–∞—è —Å—É–º–º–∞:', response.body.data.summary.totalAmount);
      console.log('   - –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞:', response.body.data.summary.averageOrderValue);
      console.log('   - –°—Ç–∞—Ç—É—Å—ã:', response.body.data.byStatus.length);
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º:', response.body.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
async function testInventoryReport() {
  console.log('\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º...');
  
  try {
    const response = await makeRequest('GET', '/api/reports/inventory', null, {
      'Authorization': `Bearer ${authToken}`
    });
    
    if (response.status === 200 && response.body.success) {
      console.log('‚úÖ –û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log('   - –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π:', response.body.data.summary.totalItems);
      console.log('   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', response.body.data.summary.totalQuantity);
      console.log('   - –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ:', response.body.data.summary.totalReserved);
      console.log('   - –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:', response.body.data.summary.totalValue);
      console.log('   - –ú–∞–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ:', response.body.data.summary.lowStockCount);
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º:', response.body.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç –æ—Ç—á–µ—Ç–∞ –ø–æ –¥–≤–∏–∂–µ–Ω–∏—é
async function testMovementReport() {
  console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –¥–≤–∏–∂–µ–Ω–∏—é...');
  
  try {
    const response = await makeRequest('GET', '/api/reports/movement', null, {
      'Authorization': `Bearer ${authToken}`
    });
    
    if (response.status === 200 && response.body.success) {
      console.log('‚úÖ –û—Ç—á–µ—Ç –ø–æ –¥–≤–∏–∂–µ–Ω–∏—é –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log('   - –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', response.body.data.summary.totalTransactions);
      console.log('   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', response.body.data.summary.totalQuantity);
      console.log('   - –û–±—â–∞—è —Å—É–º–º–∞:', response.body.data.summary.totalAmount);
      console.log('   - –¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', response.body.data.byType.length);
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –¥–≤–∏–∂–µ–Ω–∏—é:', response.body.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –¥–≤–∏–∂–µ–Ω–∏—é:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞
async function testDashboard() {
  console.log('\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞...');
  
  try {
    const response = await makeRequest('GET', '/api/reports/dashboard', null, {
      'Authorization': `Bearer ${authToken}`
    });
    
    if (response.status === 200 && response.body.success) {
      console.log('‚úÖ –î–∞—à–±–æ—Ä–¥ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log('   - –ü–µ—Ä–∏–æ–¥:', response.body.data.period);
      console.log('   - –î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–∫–∞–∑–∞–º: –µ—Å—Ç—å');
      console.log('   - –î–∞–Ω–Ω—ã–µ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º: –µ—Å—Ç—å');
      console.log('   - –î–∞–Ω–Ω—ã–µ –ø–æ –¥–≤–∏–∂–µ–Ω–∏—é: –µ—Å—Ç—å');
      console.log('   - –¢–æ–ø –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞:', response.body.data.topLiterature.length, '–ø–æ–∑–∏—Ü–∏–π');
      console.log('   - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏: –µ—Å—Ç—å');
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞:', response.body.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç —Å–≤–æ–¥–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
async function testReportSummary() {
  console.log('\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –æ—Ç—á–µ—Ç–æ–≤...');
  
  try {
    const response = await makeRequest('GET', '/api/reports/summary', null, {
      'Authorization': `Bearer ${authToken}`
    });
    
    if (response.status === 200 && response.body.success) {
      console.log('‚úÖ –°–≤–æ–¥–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log('   - –ó–∞–∫–∞–∑—ã: –≤—Å–µ–≥–æ', response.body.data.orders.total);
      console.log('   - –û—Å—Ç–∞—Ç–∫–∏: –≤—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π', response.body.data.inventory.totalItems);
      console.log('   - –î–≤–∏–∂–µ–Ω–∏–µ: –≤—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', response.body.data.movement.totalTransactions);
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –æ—Ç—á–µ—Ç–æ–≤:', response.body.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ –æ—Ç—á–µ—Ç–æ–≤:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤
async function testReportExport() {
  console.log('\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤...');
  
  try {
    // –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV
    const csvResponse = await makeRequest('GET', '/api/reports/export/orders?format=csv', null, {
      'Authorization': `Bearer ${authToken}`
    });
    
    if (csvResponse.status === 200) {
      console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —É—Å–ø–µ—à–µ–Ω');
      console.log('   - Content-Type:', csvResponse.headers['content-type']);
      console.log('   - Content-Disposition:', csvResponse.headers['content-disposition']);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV');
      return false;
    }
    
    // –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ JSON
    const jsonResponse = await makeRequest('GET', '/api/reports/export/inventory?format=json', null, {
      'Authorization': `Bearer ${authToken}`
    });
    
    if (jsonResponse.status === 200) {
      console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON —É—Å–ø–µ—à–µ–Ω');
      console.log('   - Content-Type:', jsonResponse.headers['content-type']);
      console.log('   - Content-Disposition:', jsonResponse.headers['content-disposition']);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ JSON');
      return false;
    }
    
    return true;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–æ–≤:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
async function testReportFiltering() {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤...');
  
  try {
    // –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É
    const dateFrom = new Date();
    dateFrom.setMonth(dateFrom.getMonth() - 1);
    const dateTo = new Date();
    
    const response = await makeRequest('GET', 
      `/api/reports/orders?dateFrom=${dateFrom.toISOString()}&dateTo=${dateTo.toISOString()}`, 
      null, {
        'Authorization': `Bearer ${authToken}`
      });
    
    if (response.status === 200 && response.body.success) {
      console.log('‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('   - –ó–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥:', response.body.data.summary.totalOrders);
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É:', response.body.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API –æ—Ç—á–µ—Ç–æ–≤...\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
  try {
    const healthCheck = await makeRequest('GET', '/api/health');
    if (healthCheck.status !== 200) {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É', PORT);
      return;
    }
  } catch (error) {
    console.log('‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É:', error.message);
    console.log('   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π: npm run dev');
    return;
  }
  
  const tests = [
    { name: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', fn: authenticate },
    { name: '–û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º', fn: testOrdersReport },
    { name: '–û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º', fn: testInventoryReport },
    { name: '–û—Ç—á–µ—Ç –ø–æ –¥–≤–∏–∂–µ–Ω–∏—é', fn: testMovementReport },
    { name: '–î–∞—à–±–æ—Ä–¥', fn: testDashboard },
    { name: '–°–≤–æ–¥–∫–∞ –æ—Ç—á–µ—Ç–æ–≤', fn: testReportSummary },
    { name: '–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤', fn: testReportExport },
    { name: '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤', fn: testReportFiltering }
  ];
  
  let passed = 0;
  let failed = 0;
  
  for (const test of tests) {
    try {
      const result = await test.fn();
      if (result) {
        passed++;
      } else {
        failed++;
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ "${test.name}":`, error.message);
      failed++;
    }
  }
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passed / (passed + failed)) * 100)}%`);
  
  if (failed === 0) {
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
  } else {
    console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error);